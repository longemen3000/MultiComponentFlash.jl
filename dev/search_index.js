var documenterSearchIndex = {"docs":
[{"location":"api/eos/#Equations-of-state","page":"Equations of state","title":"Equations of state","text":"","category":"section"},{"location":"api/eos/","page":"Equations of state","title":"Equations of state","text":"Pages = [\"eos.md\"]","category":"page"},{"location":"api/eos/#Types","page":"Equations of state","title":"Types","text":"","category":"section"},{"location":"api/eos/","page":"Equations of state","title":"Equations of state","text":"Modules = [MultiComponentFlash]\nPages   = [\"eos.jl\"]\nOrder   = [:type]\nPrivate = false","category":"page"},{"location":"api/eos/#MultiComponentFlash.GenericCubicEOS","page":"Equations of state","title":"MultiComponentFlash.GenericCubicEOS","text":"GenericCubicEOS is an implementation of generalized cubic equations of state.\n\nMany popular cubic equations can be written in a single form with a few changes in definitions for the terms (they are, after all, all cubic in form). References:\n\nCubic Equations of State-Which? by J.J. Martin\nSimulation of Gas Condensate Reservoir Performance  by K.H. Coats\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.GenericCubicEOS-2","page":"Equations of state","title":"MultiComponentFlash.GenericCubicEOS","text":"GenericCubicEOS(mixture, [type = PengRobinson()])\n\nInstantiate a generic cubic equation-of-state for a MultiComponentMixture and  a specified EOS.\n\nCurrently supported choices for type:\n\n1. `PengRobinson` (default)\n2. `ZudkevitchJoffe`\n3. `RedlichKwong`\n4. `SoaveRedlichKwong`\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.PengRobinson","page":"Equations of state","title":"MultiComponentFlash.PengRobinson","text":"Specializes the GenericCubicEOS to the Peng-Robinson cubic equation of state.\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.RedlichKwong","page":"Equations of state","title":"MultiComponentFlash.RedlichKwong","text":"Specializes the GenericCubicEOS to the Redlich-Kwong cubic equation of state.\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.SoaveRedlichKwong","page":"Equations of state","title":"MultiComponentFlash.SoaveRedlichKwong","text":"Specializes the GenericCubicEOS to the Soave-Redlich-Kwong cubic equation of state.\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#MultiComponentFlash.ZudkevitchJoffe","page":"Equations of state","title":"MultiComponentFlash.ZudkevitchJoffe","text":"Specializes the GenericCubicEOS to the Zudkevitch-Joffe cubic equation of state.\n\nThe Zudkevitch-Joffe equations of state allows for per-component functions of  temperature that modify the weight_ai and weight_bi functions. These additional fitting parameters allows for more flexibility when matching complex mixtures.\n\n\n\n\n\n","category":"type"},{"location":"api/eos/#Functions","page":"Equations of state","title":"Functions","text":"","category":"section"},{"location":"api/eos/","page":"Equations of state","title":"Equations of state","text":"Modules = [MultiComponentFlash]\nPages   = [\"eos.jl\"]\nOrder   = [:function]\nPrivate = false","category":"page"},{"location":"api/eos/#MultiComponentFlash.component_fugacity-Tuple{GenericCubicEOS, Any, Any, Any, Any, Any}","page":"Equations of state","title":"MultiComponentFlash.component_fugacity","text":"component_fugacity(eos, cond, i, Z, forces, scalars)\n\nGet fugacity of component i in a phase with compressibility Z and EOS constants scalars.\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.force_coefficients!-Tuple{Any, MultiComponentFlash.AbstractCubicEOS, Vararg{Any, N} where N}","page":"Equations of state","title":"MultiComponentFlash.force_coefficients!","text":"force_coefficients!(coeff, eos, cond)\n\nIn-place update of force coefficients.\n\nSee also force_coefficients\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.force_coefficients-Tuple{MultiComponentFlash.AbstractCubicEOS, Any}","page":"Equations of state","title":"MultiComponentFlash.force_coefficients","text":"force_coefficients(eos, cond)\n\nGet coefficients for forces for a specific EOS (component interactions). For most cubics, these are a set of attractive (linear and quadratic) forces and a set of linear repulsive forces.\n\nNote that the current implementation of flash assumes that these are independent of the  compositions themselves.\n\nSee also force_coefficients!\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.force_scalars-Tuple{MultiComponentFlash.AbstractCubicEOS, Any, Any}","page":"Equations of state","title":"MultiComponentFlash.force_scalars","text":"force_scalars(eos, cond, forces)\n\nCompute EOS specific scalars for the current conditions based on the forces.\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.mixture_fugacities-Tuple{Any, Vararg{Any, N} where N}","page":"Equations of state","title":"MultiComponentFlash.mixture_fugacities","text":"Allocating version of mixture_fugacities!\n\n\n\n\n\n","category":"method"},{"location":"api/eos/#MultiComponentFlash.number_of_components-Tuple{MultiComponentFlash.AbstractEOS}","page":"Equations of state","title":"MultiComponentFlash.number_of_components","text":"number_of_components(eos)\n\nReturn number of components for the underlying mixture of the EOS.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#Utilities","page":"Utilities","title":"Utilities","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Pages = [\"utilities.md\"]","category":"page"},{"location":"api/utilities/#Partial-derivatives","page":"Utilities","title":"Partial derivatives","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Modules = [MultiComponentFlash]\nPages   = [\"derivatives.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/utilities/#MultiComponentFlash.inverse_flash_update!-NTuple{4, Any}","page":"Utilities","title":"MultiComponentFlash.inverse_flash_update!","text":"inverse_flash_update!(storage, eos, c, V)\n\nUpdate internal matrix of partial derivatives for a converged flash result.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.set_partials-NTuple{5, Any}","page":"Utilities","title":"MultiComponentFlash.set_partials","text":"set_partials(v, storage, eos, c, index)\n\nModify a value v of ForwardDiff.Dual type to get the correct derivatives.\n\nIf the mixture is two-phase, the partial derivatives of phase molar fractions and vapor fraction with respect to the flash conditions (pressure, temperature and overall mole fractions) are not trivial. This function is the main gateway for setting these values.\n\nNotes\n\nExperimental interface, subject to change. You most likely want to use either set_partials_phase_mole_fractions! or set_partials_vapor_fraction\n\nIn order for this routine to work, the storage must be initialized using flash_storage with the following options enabled:\n\ninc_jac = true\ndiff_externals = true\n\nand inverse_flash_update! must be called after a successful flash. The partial derivatives with respect to p, T, z is then contained in storage.buf_inv with a negative sign. This function then performs the requisite chain rule operations for the input.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.set_partials_phase_mole_fractions!","page":"Utilities","title":"MultiComponentFlash.set_partials_phase_mole_fractions!","text":"setpartialsphasemolefractions!(xy, storage, eos, ∂c, [phase_symbol])\n\nSet partial derivatives to phase mole fraction vector with type ForwardDiff.Dual with correct values, but missing partial derivatives.\n\n\n\n\n\n","category":"function"},{"location":"api/utilities/#MultiComponentFlash.set_partials_vapor_fraction-NTuple{4, Any}","page":"Utilities","title":"MultiComponentFlash.set_partials_vapor_fraction","text":"set_partials_vapor_fraction(V, storage, eos, ∂c)\n\nSet partial derivatives to a vapor mole fraction ForwardDiff.Dual instance with correct value, but missing partial derivatives.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#Coupling-utilities","page":"Utilities","title":"Coupling utilities","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Modules = [MultiComponentFlash]\nPages   = [\"flow_coupler.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/utilities/#MultiComponentFlash.FlashedMixture2Phase","page":"Utilities","title":"MultiComponentFlash.FlashedMixture2Phase","text":"Type that holds liquid and vapor phase states together with their state\n\n\n\n\n\n","category":"type"},{"location":"api/utilities/#MultiComponentFlash.FlashedPhase","page":"Utilities","title":"MultiComponentFlash.FlashedPhase","text":"Type that holds values for a flashed phase (mole fractions + compressibility factor)\n\n\n\n\n\n","category":"type"},{"location":"api/utilities/#MultiComponentFlash.SinglePhaseLiquid","page":"Utilities","title":"MultiComponentFlash.SinglePhaseLiquid","text":"Single-phase liquid state for dispatch\n\n\n\n\n\n","category":"type"},{"location":"api/utilities/#MultiComponentFlash.SinglePhaseVapor","page":"Utilities","title":"MultiComponentFlash.SinglePhaseVapor","text":"Single-phase vapor state for dispatch\n\n\n\n\n\n","category":"type"},{"location":"api/utilities/#MultiComponentFlash.TwoPhaseLiquidVapor","page":"Utilities","title":"MultiComponentFlash.TwoPhaseLiquidVapor","text":"Two-phase liquid-vapor state for dispatch\n\n\n\n\n\n","category":"type"},{"location":"api/utilities/#MultiComponentFlash.UnknownPhaseState","page":"Utilities","title":"MultiComponentFlash.UnknownPhaseState","text":"Unknown phase state (not initialized)\n\n\n\n\n\n","category":"type"},{"location":"api/utilities/#MultiComponentFlash.lbc_viscosities-Tuple{Any, Any, Any, FlashedMixture2Phase}","page":"Utilities","title":"MultiComponentFlash.lbc_viscosities","text":"lbc_viscosities(eos, p, T, flashed_mixture)\n\nCompute phase viscosities for a flashed two-phase mixture using the LBC correlation.\n\nAlways returns a named tuple of (μl, μv), even if the mixture is single-phase.\n\nThe value in the absent phase will be zero.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.mass_densities-Tuple{Any, Any, Any, FlashedMixture2Phase}","page":"Utilities","title":"MultiComponentFlash.mass_densities","text":"mass_densities(eos, p, T, flashed_mixture)\n\nCompute mass densities for a flashed two-phase mixture.\n\nAlways returns a named tuple of (ρl, ρv), even if the mixture is single-phase.\n\nThe value in the absent phase will be zero.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.mass_density-Tuple{Any, Any, Any, FlashedPhase}","page":"Utilities","title":"MultiComponentFlash.mass_density","text":"Compute mass density of a flashed phase\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.molar_volume-Tuple{Any, Any, Any, FlashedPhase}","page":"Utilities","title":"MultiComponentFlash.molar_volume","text":"Compute molar volume of a flashed phase\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.phase_is_present-Tuple{Any, Any}","page":"Utilities","title":"MultiComponentFlash.phase_is_present","text":"phase_is_present(label, phase_state)\n\nCheck if a phase (symbol :liquid/:vapor) is present with the provided phase state.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.phase_saturations-Tuple{FlashedMixture2Phase}","page":"Utilities","title":"MultiComponentFlash.phase_saturations","text":"phase_saturations(flashed_mixture)\n\nCompute phase saturations for a flashed two-phase mixture.\n\nAlways returns a named tuple of (Sl, Sv), even if the mixture is single-phase.\n\nThe value in the absent phase will be zero.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#Various","page":"Utilities","title":"Various","text":"","category":"section"},{"location":"api/utilities/","page":"Utilities","title":"Utilities","text":"Modules = [MultiComponentFlash]\nPages   = [\"utils.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/utilities/#MultiComponentFlash.lbc_viscosity-NTuple{4, Any}","page":"Utilities","title":"MultiComponentFlash.lbc_viscosity","text":"lbc_viscosity(eos, p, T, ph; <keyword arguments>)\n\nCompute the viscosity of a mixture using the Lohrenz-Bray-Clark correlation.\n\n\n\n\n\n","category":"method"},{"location":"api/utilities/#MultiComponentFlash.single_phase_label-Tuple{Any, Any}","page":"Utilities","title":"MultiComponentFlash.single_phase_label","text":"single_phase_label(mixture, cond)\n\nLi's method for single-phase labeling of a mixture. Estimate of pure vapor/liquid.\n\nReturns a vapor fraction that is either 1.0 (=pure vapor) or 0.0 (=pure liquid).\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#Equilibrium-constants","page":"Equilibrium constants","title":"Equilibrium constants","text":"","category":"section"},{"location":"api/kvalues/","page":"Equilibrium constants","title":"Equilibrium constants","text":"Pages = [\"kvalues.md\"]","category":"page"},{"location":"api/kvalues/","page":"Equilibrium constants","title":"Equilibrium constants","text":"Modules = [MultiComponentFlash]\nPages   = [\"rachford_rice.jl\", \"kvalues.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/kvalues/#MultiComponentFlash.solve_rachford_rice","page":"Equilibrium constants","title":"MultiComponentFlash.solve_rachford_rice","text":"solve_rachford_rice(K, z, [V]; <keyword arguments>)\n\nCompute vapor mole fraction V for given equilibrium constants K and mole fractions z.\n\nArguments\n\nK - Equal length to z, containing the equilibrium constants for each component. z - Mole fractions. Should sum up to unity.\n\nKeyword arguments\n\ntol = 1e-12 - Tolerance for solve. maxiter - Maximum number of iterations ad - Use automatic differentiation (ForwardDiff) instead of analytical gradient.\n\nExamples\n\njulia> solve_rachford_rice([0.5, 1.5], [0.3, 0.7])\n0.8000000000000002\n\n\n\n\n\n","category":"function"},{"location":"api/kvalues/#MultiComponentFlash.initial_guess_K!-Tuple{Any, Any, Any}","page":"Equilibrium constants","title":"MultiComponentFlash.initial_guess_K!","text":"initial_guess_K(eos, cond)\n\nIn-place version of initial_guess_K.\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#MultiComponentFlash.initial_guess_K-Tuple{Any, Any}","page":"Equilibrium constants","title":"MultiComponentFlash.initial_guess_K","text":"initial_guess_K(eos, cond)\n\nProduce a plausible initial guess for K values for eos under current cond.\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#MultiComponentFlash.wilson_estimate!-Union{Tuple{R}, Tuple{AbstractVector{R}, Any, R, R}} where R<:Real","page":"Equilibrium constants","title":"MultiComponentFlash.wilson_estimate!","text":"wilson_estimate!(K, properties, p, T)\n\nUpdate a vector K in-place with K-values from wilson_estimate.\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#MultiComponentFlash.wilson_estimate-Tuple{MultiComponentMixture, Any, Any}","page":"Equilibrium constants","title":"MultiComponentFlash.wilson_estimate","text":"wilson_estimate(properties, p, T)\n\nCreate vector of K-values that holds the wilson_estimate for each species.\n\n\n\n\n\n","category":"method"},{"location":"api/kvalues/#MultiComponentFlash.wilson_estimate-Union{Tuple{R}, NTuple{5, R}} where R<:Real","page":"Equilibrium constants","title":"MultiComponentFlash.wilson_estimate","text":"wilson_estimate(p, T, ω, p_c, T_c)\n\nEstimate K-values for a given acentric factor ω and pressure and temperature at current and critical conditions.\n\nReference Vapor-Liquid Equilibrium. XI. A New Expression for the Excess Free Energy of Mixing by GM Wilson\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#Vapor-liquid-equilibrium-(flash)","page":"Vapor-liquid equilibrium (Flash)","title":"Vapor-liquid equilibrium (flash)","text":"","category":"section"},{"location":"api/flash/","page":"Vapor-liquid equilibrium (Flash)","title":"Vapor-liquid equilibrium (Flash)","text":"Pages = [\"flash.md\"]","category":"page"},{"location":"api/flash/#Stability-test","page":"Vapor-liquid equilibrium (Flash)","title":"Stability test","text":"","category":"section"},{"location":"api/flash/","page":"Vapor-liquid equilibrium (Flash)","title":"Vapor-liquid equilibrium (Flash)","text":"Modules = [MultiComponentFlash]\nPages   = [\"stability.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/flash/#MultiComponentFlash.stability_2ph","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.stability_2ph","text":"stability_2ph(eos, c, [K])\n\nDetermine if mixture is single-phase stable under conditions c.\n\nThis is done using a version of Michelsen's stability test.\n\nReference: The isothermal flash problem. Part I. Stability\n\n\n\n\n\n","category":"function"},{"location":"api/flash/#Two-phase-flash","page":"Vapor-liquid equilibrium (Flash)","title":"Two-phase flash","text":"","category":"section"},{"location":"api/flash/","page":"Vapor-liquid equilibrium (Flash)","title":"Vapor-liquid equilibrium (Flash)","text":"Modules = [MultiComponentFlash]\nPages   = [\"flash.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/flash/#MultiComponentFlash.NewtonFlash","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.NewtonFlash","text":"Flash using Newton's method for zero solve.\n\nOnly conditionally convergent, but has better convergence rate than SSI.\n\nSee also: flash_2ph!, SSIFlash SSINewtonFlash\n\n\n\n\n\n","category":"type"},{"location":"api/flash/#MultiComponentFlash.SSIFlash","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.SSIFlash","text":"Flash method that uses successive subtition.\n\nUnconditionally convergent, does not require derivatives, but is very slow around critical regions.\n\nSee also: flash_2ph!, NewtonFlash SSINewtonFlash\n\n\n\n\n\n","category":"type"},{"location":"api/flash/#MultiComponentFlash.SSINewtonFlash","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.SSINewtonFlash","text":"SSINewtonFlash([swap_iter = 5])\n\nPerform a number of SSI iterations, followed by Newton until convergence.\n\nSee also: flash_2ph!, SSIFlash NewtonFlash\n\n\n\n\n\n","category":"type"},{"location":"api/flash/#MultiComponentFlash.flash_2ph!","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.flash_2ph!","text":"flash_2ph!(storage, eos, c, K; <keyword arguments>)\n\nNon-allocating version of flash_2ph where storage is pre-allocated.\n\nUseful if you are performing many flashes of the same system with varying conditions.\n\nArguments\n\nstorage: Should be output from flash_storage(eos, c, method = method). Preallocated storage.\n\nRemaining arguments documented in flash_2ph.\n\nKeyword arguments\n\nupdate_forces = true: Update the p, T dependent forces in storage initially.\n\n\n\n\n\n","category":"function"},{"location":"api/flash/#MultiComponentFlash.flash_2ph-Union{Tuple{T}, Tuple{Any, T}, Tuple{Any, T, Any}} where T","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.flash_2ph","text":"flash_2ph(eos, c, [K]; <keyword arguments>)\n\nPerform two-phase flash with a given EOS under a set of specific conditions. Returns vapor fraction. Modifies K in-place.\n\nGiven a mixture with pressure, temperature and mole fractions, this routine performs a vapor-liquid equilibrium calculation after a stability test.\n\nTwo outcomes are possible:\n\nA single-phase condition prevails (returned vapor fraction is NaN) and a single phase (liquid or vapor) is stable.\nA two-phase condition is possible. The routine produces K-values and vapor fraction so that the following holds:\nIsofugacity constraint for all components (f_li = f_vi)\nMolar balance for all components ((1-V) x_i - V y_i - z_i)\nUnity condition (sum_i (x_i - y_i) = 0)\n\nArguments\n\neos: the equation-of-state to be used for the flash\nc: conditions to flash the mixture at on the form (p = 10e5, T = 303.15, z = [0.5, 0.3, 0.2])\nK: optionally a buffer of length number_of_components(eos) used to hold K-values. Modified in-place.\n\nKeyword arguments\n\nmethod = SSIFlash(): Flash method to use. Can be SSIFlash(), NewtonFlash() or SSINewtonFlash().\ntolerance = 1e-8: Tolerance for the convergence criterion. Relative to 1-R_i_infty where R_i = f_ilf_iv\nmaxiter = 10000: Maximum nubmer of iterations for both stability tests and the main flash.\nverbose = false: Emit extra information during solve.\nextra_out = false: Return (V, K, conv) where conv contains iterations and oncergence status instead of just V.\n\nSee also: flash_2ph!, single_phase_label\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#MultiComponentFlash.flash_storage","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.flash_storage","text":"flash_storage(eos, [c]; <keyword arguments>)\n\nPre-allocate storage for flash_2ph!.\n\nArguments\n\neos: the equation-of-state to be used for the flash\nc: conditions for the mixture. Types in conditions must match later usage (e.g. for use with ForwardDiff).\n\nKeyword arguments\n\nmethod = SSIFlash(): Flash method to use. Can be SSIFlash(), NewtonFlash() or SSINewtonFlash().\nstatic_size = false: Use SArrays and MArrays for fast flash, but slower compile times.\ninc_jac: Allocate storage for Newton/Jacobian. Required for Newton (and defaults to true for that method) or for diff_externals.\ndiff_externals = false: Allocate storage for matrix inversion required to produce partial derivatives of flash using set_partials.\n\nSee also: flash_2ph! set_partials\n\n\n\n\n\n","category":"function"},{"location":"api/flash/#MultiComponentFlash.liquid_mole_fraction-Tuple{Any, Any, Any}","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.liquid_mole_fraction","text":"Compute liquid mole fraction from overall mole fraction, K-value and V vapor fraction\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#MultiComponentFlash.vapor_mole_fraction-Tuple{Any, Any, Any}","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.vapor_mole_fraction","text":"Compute vapor mole fraction from overall mole fraction, K-value and V vapor fraction\n\n\n\n\n\n","category":"method"},{"location":"api/flash/#MultiComponentFlash.vapor_mole_fraction-Tuple{Any, Any}","page":"Vapor-liquid equilibrium (Flash)","title":"MultiComponentFlash.vapor_mole_fraction","text":"Compute vapor mole fraction from liquid mole fraction and K-value\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#Mixtures","page":"Mixtures","title":"Mixtures","text":"","category":"section"},{"location":"api/mixtures/","page":"Mixtures","title":"Mixtures","text":"Pages = [\"mixtures.md\"]","category":"page"},{"location":"api/mixtures/","page":"Mixtures","title":"Mixtures","text":"Modules = [MultiComponentFlash]\nPages   = [\"mixtures.jl\"]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/mixtures/#MultiComponentFlash.MolecularProperty","page":"Mixtures","title":"MultiComponentFlash.MolecularProperty","text":"MolecularProperty(molar_mass, p_crit, T_crit, V_crit, acentric_factor = 0.0)\n\nType that defines the static properties of a molecular species.\n\n\n\n\n\n","category":"type"},{"location":"api/mixtures/#MultiComponentFlash.MolecularProperty-Tuple{String}","page":"Mixtures","title":"MultiComponentFlash.MolecularProperty","text":"MolecularProperty(\"Name\")\n\nConvenience constructor that looks up molecular properties from a table in tabulated_properties.\n\nThe properties are taken from the wonderful MIT-licensed CoolProp. Please note that the equations of state included in this module may not be approprioate for all the available fluids, especially for mixtures!\n\nSee list of species at CoolProp website.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.MultiComponentMixture","page":"Mixtures","title":"MultiComponentFlash.MultiComponentMixture","text":"MultiComponentMixture(properties::NTuple{N, MolecularProperty}; A_ij = nothing, names = [\"C1\", \"C2\", ...], name = \"UnnamedMixture\")\n\nCreate a multicomponent mixture with an optional binary interaction coefficient matrix A_ij.\n\n\n\n\n\n","category":"type"},{"location":"api/mixtures/#MultiComponentFlash.acentric_factor-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.acentric_factor","text":"Get the acentric factorfor a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.critical_pressure-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.critical_pressure","text":"Get the critical pressure for a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.critical_temperature-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.critical_temperature","text":"Get the critical temperature for a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.critical_volume-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.critical_volume","text":"Get the critical volume for a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.molar_weight-Union{Tuple{MolecularProperty{R}}, Tuple{R}} where R","page":"Mixtures","title":"MultiComponentFlash.molar_weight","text":"Get the molar weight for a species.\n\n\n\n\n\n","category":"method"},{"location":"api/mixtures/#MultiComponentFlash.number_of_components-Union{Tuple{MultiComponentMixture{R, N}}, Tuple{N}, Tuple{R}} where {R, N}","page":"Mixtures","title":"MultiComponentFlash.number_of_components","text":"number_of_components(mixture)\n\nReturn number of components in the MultiComponentMixture.\n\n\n\n\n\n","category":"method"},{"location":"#MultiComponentFlash-Manual","page":"Home","title":"MultiComponentFlash Manual","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = MultiComponentFlash","category":"page"},{"location":"","page":"Home","title":"Home","text":"Documentation for MultiComponentFlash.","category":"page"}]
}
